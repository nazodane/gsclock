#!/usr/bin/python
# Copyright (C) 2024 Toshimitsu Kimura <lovesyao@gmail.com>
# SPDX-License-Identifier: BSD-3-Clause
from time import sleep, time_ns
import os
from os.path import expanduser

print("QUERY: vertical monitor check via screeninfo module")
clock_monitor = None
# pip install screeninfo
from screeninfo import get_monitors
for m in get_monitors():
    if m.height > m.width: # find vertical monitor
        print("Found: " + str(m))
        clock_monitor = m
        break
    print("Ignore: " + str(m))

if not clock_monitor:
    print("FAILED: no vertical monitor found!")
    exit()

print("SUCCESS: vertical monitor found!")


# 他にユーザーの居るシリアルコンソールは基本的に奪わないようにする
# シリアルを繋いでみる→目的のデータが飛んでるならシリアルナンバーを保存→シリアルナンバーを保存したものだけfuser -kを飛ばす

import subprocess
def find_processes_using_dev(dev_name): # psutil not works.
    try:
        output = subprocess.check_output(["fuser", dev_name])
        pids = output.decode().split()
        return [int(pid) for pid in pids]
    except subprocess.CalledProcessError:
        return []

print("QUERY: arduino serial port check via pyudev module, pyserial module and psmisc's fuser")
# pip install pyserial pyudev
import serial
import pyudev

def connect_to_arduino():
  udevc = pyudev.Context()

  arduino = None
  first_line = None
  for device in udevc.list_devices(subsystem='tty'):
    if 'ID_VENDOR_ID' not in device.properties or 'ID_MODEL_ID' not in device.properties: # if !isUSB
      continue
    port = device.device_node
    vendor_id = device.properties['ID_VENDOR_ID']
    model_id = device.properties['ID_MODEL_ID']
    serial_number = device.properties.get("ID_SERIAL") # or ID_SERIAL_SHORT
    print("candidate of the arduino serial port: %s %s:%s %s"%(port, vendor_id, model_id, serial_number))

    count = 3
    while count > 0:
      count -= 1
      try:
        print("checking the serial port %s..."%(port))
        pids = find_processes_using_dev(port)
        if len(pids): # if the port is used, we shouldn't steal the input of the port.
            print("used by pids %s so skipping the serial port %s..."%(pids, port))
            # if the serial number is in whitelist, use this anyways. -> not implemented
            # os.system("fuser -k %s"%(port))
            count = 0
            continue
        print("connecting %s..."%(port))
        arduino = serial.Serial(port, 9600, timeout=1, writeTimeout=False)
        arduino.flush()
        arduino.read_until().decode('utf-8').rstrip() # drop the garbage input
        first_line = arduino.read_until().decode('utf-8').rstrip()
        print(line)
        if first_line.startswith(("praw:", "temp:", "humi:", "mesg:")):
          break
        arduino.close()
        arduino = None
        print("failed and closing the serial port %s..."%(port))
      except KeyboardInterrupt:
        print("Keybord interrupt, exiting...")
        if arduino:
          arduino.close()
        exit()
      except:
        print("WARNING: error to connect the arduino serial, retrying...")

  if not arduino:
    print("FAILED: no arduino serial port found!")

  print("SUCCESS: arduino serial port found!")

  return (arduino, first_line)


CLOCK_SIZE = 1080

if __name__ == '__main__':
    # pip install selenium
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome import service as fs
    from selenium.common.exceptions import WebDriverException
    from selenium.webdriver.common.by import By
#    from selenium.common import WebDriverException
    print("QUERY: chrome window opening via selenium module")
    chrome_options = Options()
    chrome_options.add_experimental_option("excludeSwitches", ['enable-automation'])
    html_path = "%s/gsclock.html"%(os.path.dirname(__file__))
    print(os.path.dirname(__file__))
    if not os.path.exists(html_path):
        html_path = expanduser("~") + "/usr/share/gsclock/gsclock.html"
    if not os.path.exists(html_path):
        html_path = expanduser("~") + "/usr/local/share/gsclock/gsclock.html"
    if not os.path.exists(html_path):
        html_path = expanduser("~") + "/.local/share/gsclock/gsclock.html"
    if not os.path.exists(html_path):
        print("FAILED: no gsclock.html found...")
        exit()
    chrome_options.add_argument("--app=file://" + html_path)
    chrome_options.add_argument("--window-position=%s,%s"%(clock_monitor.x, clock_monitor.y))
    chrome_options.add_argument("--start-fullscreen")
#    chrome_options.add_argument("--kiosk")
    chrome_service = fs.Service(executable_path="/usr/lib/chromium-browser/chromedriver")
    driver = webdriver.Chrome(service=chrome_service, options=chrome_options)
    print("SUCCESS: chrome window opened")

    print("QUERY: chrome window stickying via wmctrl")
    # pip install wmctrl
    from wmctrl import Window

    title_bak = driver.execute_script("return document.title;")
    det_title = "window id detection by clock.py"
    driver.execute_script("document.title = '%s';"%(det_title))
    sleep(1) # XXX: 0.1 not works...
    window = [w for w in Window.list() if w.wm_name == det_title][0]
    window.set_properties(["add", "sticky"])
    driver.execute_script("document.title = '%s';"%(title_bak))

    print("SUCCESS: chrome window stickied")

    arduino, line = connect_to_arduino()

    def process_line(line):
        if (len(line) > 6 and line[4] == ':'):
            elm = driver.find_element(By.ID, line[0:4])
            driver.execute_script("arguments[0].innerText = arguments[1]", elm, line[6:])
    

    while True:
        if not arduino:
            sleep(1)
            arduino, line = connect_to_arduino()
            continue

        try:
            _ = driver.window_handles
        except: #except WebDriverException:
            print("No selenium window found, exiting...")
            exit()

        try:
#            line = arduino.readline().decode('utf-8').rstrip()
            process_line(line)

            """
            # DSD playback test
            print("QUERY: PDM playback via serial console")
            with open("/media/nazo/99b6c642-e66e-487f-a871-78b86fa15fd51/_/pdm_test.dsf", mode='rb') as f:
                d = f.read()
                # DSF specfication: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf
                if d[0:4] != b"DSD " or d[0x3c] != 1 or d[0x50:0x54] != b"data":
                   exit()
                dsf_size = int.from_bytes(d[0x54:0x5c], byteorder='little') - 12
                print("DSF file recognized! size=%s"%(dsf_size))

                print("Send the command for PDM playback to the device!")
                while True:
                    arduino.write(b"a");
                    arduino.flush();
                    line = arduino.read_until().decode('utf-8').rstrip()
                    print(line)
                    process_line(line)
                    if line != "mesg: PDM playback ready!":
#                        print("FAILED: the device responded wrong message...")
                        continue
                    break

                print("DSF data sending start!")
                arduino.baudrate = 400000; # 400kHz
#                sleep(0.001);
                ns = None
                for x in d[0x5c:0x5c + dsf_size]: # not working... at least this is too slow
                    ns = time_ns()
                    arduino.write(x);
#                    arduino.flushOutput();
                    ns_diff = time_ns() - ns
#                    if ns_diff > 2500: # 1s / 400kHz
#                        print("overrun %s"%(ns_diff));
                print("SUCCESS: DSF data sending done!")
                exit()
"""

            line = arduino.read_until().decode('utf-8').rstrip()
            print(line)
        except KeyboardInterrupt:
            print("Keybord interrupt, exiting...")
            exit()
        except:
            # reconnect to arduino
            if arduino:
                arduino.close()
            arduino, line = connect_to_arduino()

